==============================================================================
------------------------------------------------------------------------------
Generating an access token: https://sourcegraph.com/docs/cli/how-tos/creating_an_access_token

------------------------------------------------------------------------------
                                                                  *CodyProvider*
                                 `CodyProvider`
Class ~
{avante_cody.AvanteProviderFunctor}

------------------------------------------------------------------------------
Class ~
{avante_cody.AvanteProviderOpts} All fields are optional as they'll be merged with defaults
Fields ~
{disable_tools} `(optional)` `(boolean)`
{endpoint} `(optional)` `(string)`
{api_key_name} `(optional)` `(string)`
{context_window} `(optional)` `(integer)`
{max_tokens} `(optional)` `(integer)`
{max_output_tokens} `(optional)` `(integer)`
{stream} `(optional)` `(boolean)`
{topK} `(optional)` `(integer)`
{topP} `(optional)` `(integer)`
{model} `(optional)` `(string)`
{proxy} `(optional)` `(string)`
{allow_insecure} `(optional)` `(boolean)`
{timeout} `(optional)` `(integer)`
{temperature} `(optional)` `(number)`
{cody_context} `(optional)` `(table)`
{role_map} `(optional)` `(table)`

------------------------------------------------------------------------------
Class ~
{avante_cody.AvanteProviderFunctor}
Fields ~
{disable_tools} `(boolean)`
{endpoint} `(string)`
{api_key_name} `(string)`
{context_window} `(integer)`
{max_tokens} `(integer)`
{max_output_tokens} `(integer)`
{stream} `(boolean)`
{topK} `(integer)`
{topP} `(integer)`
{model} `(string)`
{proxy} `(string | nil)`
{allow_insecure} `(boolean)`
{timeout} `(integer)`
{temperature} `(integer)`
{cody_context} `(table)`
{role_map} `(table)`

------------------------------------------------------------------------------
                                                            *CodyProvider:new()*
                  `CodyProvider:new`({opts}, {event_debugger})
Parameters ~
{event_debugger} `(optional)` `(avante_cody.EventDebugger)`
{opts} `(optional)` `(avante_cody.AvanteProviderOpts)` Options to override defaults
Return ~
`(avante_cody.AvanteProviderFunctor)`

------------------------------------------------------------------------------
Class ~
{CodeContextBlob}
Fields ~
{blob} `(table)` Information about the code file
{blob.path} `(string)` Path to the code file
{chunkContent} `(string)` Content of the code chunk

------------------------------------------------------------------------------
                                         *CodyProvider:parse_context_messages()*
                `CodyProvider:parse_context_messages`({context})
Parse codebase context into conversation messages
Parameters ~
{context} `(CodeContextBlob[])` List of code context blobs
Return ~
`(ParsedMessage[])` List of parsed context messages

------------------------------------------------------------------------------
                                           *CodyProvider:add_user_tool_result()*
 `CodyProvider:add_user_tool_result`({messages}, {msg}, {msg_content}, {opts})
Add a user tool result message to the message list
Parameters ~
{messages} `(ParsedMessage[])` The messages table to append to
{msg} `(CodyMessage)` The original message from the user
{msg_content} `(CodyToolMessageContent)` The content portion of the message
{opts} `(optional)` `({ is_thinking_model?: boolean })`

------------------------------------------------------------------------------
                                        *CodyProvider:add_assistant_tool_call()*
    `CodyProvider:add_assistant_tool_call`({messages}, {msg}, {msg_content})
Add an assistant tool call message to the message list
Parameters ~
{messages} `(ParsedMessage[])` The messages table to append to
{msg} `(CodyMessage)` The original message from the assistant
{msg_content} `(CodyToolMessageContent)` The content portion of the message

------------------------------------------------------------------------------
Class ~
{CodyToolMessageContent}
Fields ~
{id} `(string)` The ID of the tool call
{name} `(string)` The name of the tool
{input} `(table|string)` The input to the tool
{tool_use_id} `(string)` ID of the tool use (for tool results)
{content} `(string)` Content of the tool result

------------------------------------------------------------------------------
Class ~
{CodyMessage}
Fields ~
{role} `(string)` The role of the message sender (user, assistant, system)
{content} `(string|table)` Either a string for plain text or a table for tool calls/results

------------------------------------------------------------------------------
Class ~
{CodyToolHistory}
Fields ~
{tool_use} `(table)` Information about the tool use
{tool_use.id} `(string)` ID of the tool use
{tool_use.name} `(string)` Name of the tool
{tool_use.input_json} `(string)` JSON string of the tool arguments
{tool_result} `(table)` Information about the tool result
{tool_result.tool_use_id} `(string)` ID of the associated tool use
{tool_result.content} `(string)` Content of the tool result

------------------------------------------------------------------------------
Class ~
{ParseMessagesOpts}
Fields ~
{system_prompt} `(string)` The system prompt text
{messages} `(CodyMessage[])` List of messages in the conversation
{tool_histories} `(optional)` `(CodyToolHistory[])` Optional list of tool use histories

------------------------------------------------------------------------------
Class ~
{ParsedMessage}
Fields ~
{speaker} `(string)` The speaker role mapped to Cody format
{text} `(optional)` `(string)` The message text (for plain text messages)
{content} `(optional)` `(table)` The content for tool calls or results

------------------------------------------------------------------------------
                                                 *CodyProvider:parse_messages()*
                     `CodyProvider:parse_messages`({opts})
Parse conversation messages into the format required by Cody API
Parameters ~
{opts} `(ParseMessagesOpts)` Options containing the conversation data
Return ~
`(ParsedMessage[])` List of parsed messages in Cody format

------------------------------------------------------------------------------
Class ~
{avante_cody.CodyUsageDetails}
Fields ~
{cached_tokens} `(optional)` `(integer)` Number of tokens that were cached
{cache_creation_input_tokens} `(optional)` `(integer)` Number of input tokens used to create cache

------------------------------------------------------------------------------
Class ~
{avante_cody.CodyUsage}
Fields ~
{completion_tokens} `(optional)` `(integer)` Number of tokens in the completion
{prompt_tokens} `(optional)` `(integer)` Number of tokens in the prompt
{total_tokens} `(optional)` `(integer)` Total number of tokens used
{credits} `(optional)` `(integer)` Number of credits consumed
{prompt_tokens_details} `(optional)` `(avante_cody.CodyUsageDetails)` Additional details about prompt tokens

------------------------------------------------------------------------------
Class ~
{avante_cody.AvanteOnStopOpts}
Fields ~
{reason} `(optional)` `(string)`
{error} `(optional)` `(string)`
{tool_use_list} `(optional)` `(table)`
{usage} `(optional)` `(avante_cody.CodyUsage)`
{stopReason} `(optional)` `(string)`

------------------------------------------------------------------------------
Class ~
{avante_cody.AvanteParseResponseOpts}
Fields ~
{on_stop} `(fun(opts: {}))`
{on_chunk} `(fun(chunk: string))`

------------------------------------------------------------------------------
                                                 *CodyProvider.parse_response()*
`CodyProvider.parse_response`({self}, {ctx}, {data_stream}, {event_state}, {opts})
Parameters ~
{ctx} `(any)`
{data_stream} `(string)`
{event_state} `(string)`
{opts} `(avante_cody.AvanteParseResponseOpts)`

------------------------------------------------------------------------------
                                              *CodyProvider:resolve_env_value()*
                   `CodyProvider:resolve_env_value`({value})
environment variable or command for a value
Parameters ~
{value} `(string)` The value to resolve (env var name or cmd: command)
Return ~
`(string|nil)` The resolved value

------------------------------------------------------------------------------
Class ~
{avante_cody.CodyProviderCodyTool}
Fields ~
{name} `(string)`
{description} `(string)`
{parameters} `({ type: string, properties: { [string]: { type: string, description: string }, additionalProperties: boolean, required: string[] } })`
{type} `(string)`
{id} `(string)`

------------------------------------------------------------------------------
                                                *CodyProvider:parse_curl_args()*
            `CodyProvider:parse_curl_args`({provider}, {code_opts})
Class ~
{avante_cody.CodyProviderCurlHeaders}
Fields ~
{Content-Type} `(string)`
{Authorization} `(string)`

Class ~
{avante_cody.CodyProviderCurlMessages}
{speaker} `(string)`
{text} `(string)`

Class ~
{avante_cody.CodyProviderCurlBody}
{model} `(string)`
{messages} `(avante_cody.CodyProviderCurlMessages)`
{temperature} `(number)`
{topK} `(integer)`
{topP} `(number)`
{stream} `(boolean)`
{maxTokensToSample} `(integer)`
{tools} `({ type: string, ["function"]: avante_cody.CodyProviderCodyTool }[])`

Class ~
{avante_cody.CodyProviderCurlArgs}
{url} `(string)`
{timeout} `(integer)`
{headers} `(avante_cody.CodyProviderCurlHeaders)`
{body} `(avante_cody.CodyProviderCurlBody)`
{insecure} `(boolean)`
@return avante_cody.CodyProviderCurlArgs


==============================================================================
------------------------------------------------------------------------------
@class avante_cody.ConfigOverrides
@field avante_llm_summarize_chat_thread boolean
@field avante_llm_summarize_chat_thread_fn function
@field avante_llm_summarize_memory boolean
@field avante_llm_summarize_memory_fn function

------------------------------------------------------------------------------
                                                            *AvanteCody.options*
                              `AvanteCody.options`
Class ~
{avante_cody.Config}
Fields ~
{debug} `(boolean)` Debug mode
{logfile} `(boolean)` Create and log to a file
{override} `(avante_cody.ConfigOverrides)`
Default values:
>lua
  AvanteCody.options = {
      -- Prints useful logs about what event are triggered, and reasons actions are executed.
      debug = false,
      logfile = false,
      providers = {},
      override = {
          avante_llm_summarize_chat_thread = true,
          avante_llm_summarize_chat_thread_fn = overrides.summarize_chat_thread_fn,
          avante_llm_summarize_memory = true,
          avante_llm_summarize_memory_fn = overrides.summarize_memory_fn,
      },
  }

<
------------------------------------------------------------------------------
                                                            *AvanteCody.setup()*
                         `AvanteCody.setup`({options})
Define your avante-cody setup.

Parameters ~
{options} `(avante_cody.Config)` Module config table. See |AvanteCody.options|.

Usage ~
`require("avante-cody").setup()` (add `{}` with your |AvanteCody.options| table)


==============================================================================
------------------------------------------------------------------------------
                                                                 *EventDebugger*
                                `EventDebugger`
@class avante_cody.EventDebugger
@field provider_name string
@field parse_curl_args table
@field parse_response table


==============================================================================
------------------------------------------------------------------------------
                                        *main.configure_ratelimit_protections()*
                `main.configure_ratelimit_protections`({config})
@param config avante_cody.Config


==============================================================================
------------------------------------------------------------------------------
                                          *overrides.summarize_chat_thread_fn()*
                 `overrides.summarize_chat_thread_fn`({config})
Override the summarize_chat_thread_title function to reduce api ratelimit requests
Parameters ~
{config} `(avante_cody.Config)`

------------------------------------------------------------------------------
                                               *overrides.summarize_memory_fn()*
                   `overrides.summarize_memory_fn`({config})
Parameters ~
{config} `(avante_cody.Config)`


==============================================================================
------------------------------------------------------------------------------
                                                                    *FileWriter*
                                  `FileWriter`
@class FileWriter
@field filename string | nil
@field file file* | nil


 vim:tw=78:ts=8:noet:ft=help:norl: