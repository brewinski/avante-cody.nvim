local messages = {

    {
        content = "Look at the git diff for the git diff, particularly looking at the cody-provider where I've improved the tool use functionality and draft a commit using the conventional commit format.",
        role = "user",
    },

    {
        content = {
            {
                id = "toolu_01TN8c8U6gq11jrRna9RUXmw",
                input = { scope = "lua/avante-cody/cody-provider.lua" },
                name = "git_diff",
                type = "tool_use",
            },
        },
        role = "assistant",
    },

    {
        content = {
            {
                content = 'diff --git a/lua/avante-cody/cody-provider.lua b/lua/avante-cody/cody-provider.lua\nindex 64abd04..58b0f87 100644\n--- a/lua/avante-cody/cody-provider.lua\n+++ b/lua/avante-cody/cody-provider.lua\n@@ -151,11 +151,37 @@ function CodyProvider:parse_messages(opts)\n \n     if opts.tool_histories then\n         for _, tool_history in ipairs(opts.tool_histories) do\n-            table.insert(messages, {\n+            -- push an assistant message\n+            local assistant_message = {\n+                speaker = "assistant",\n+                content = {\n+                    { type = "text", text = "call this tool for me" },\n+                    {\n+                        type = "tool_call",\n+                        tool_call = {\n+                            id = tool_history.tool_use.id,\n+                            name = tool_history.tool_use.name,\n+                            arguments = tool_history.tool_use.input_json,\n+                        },\n+                    },\n+                },\n+            }\n+\n+            local human_message = {\n                 speaker = "user",\n-                content = tool_history.tool_result.content,\n-                tool_call_id = tool_history.tool_result.tool_use_id,\n-            })\n+                content = {\n+                    {\n+                        type = "tool_result",\n+                        tool_result = {\n+                            id = tool_history.tool_result.tool_use_id,\n+                            content = tool_history.tool_result.content,\n+                        },\n+                    },\n+                },\n+            }\n+\n+            table.insert(messages, assistant_message)\n+            table.insert(messages, human_message)\n         end\n     end\n \n@@ -322,6 +348,13 @@ function CodyProvider:parse_config(opts)\n             end)\n end\n \n+---@class avante_cody.CodyProviderCodyTool\n+---@field name string\n+---@field description string\n+---@field parameters { type: string, properties: { [string]: { type: string, description: string }, additionalProperties: boolean, required: string[] } }\n+---@field type string\n+---@field id string\n+\n ---@class avante_cody.CodyProviderCurlHeaders\n ---@field Content-Type string\n ---@field Authorization string\n@@ -338,6 +371,7 @@ end\n ---@field topP number\n ---@field stream boolean\n ---@field maxTokensToSample integer\n+---@field tools { type: string, ["function"]: avante_cody.CodyProviderCodyTool }[]\n ---\n ---@class avante_cody.CodyProviderCurlArgs\n ---@field url string\n@@ -373,7 +407,6 @@ function CodyProvider.parse_curl_args(provider, code_opts)\n     local messages = provider:parse_messages(code_opts)\n \n     return {\n-        -- url = base.endpoint .. \'/.api/llm/chat/completions\',\n         url = base.endpoint\n             .. "/.api/completions/stream?api-version=7&client-name=vscode&client-version=1.34.3",\n         timeout = base.timeout,\n',
                is_error = false,
                tool_use_id = "toolu_01TN8c8U6gq11jrRna9RUXmw",
                type = "tool_result",
            },
        },
        role = "user",
    },

    {
        content = "I'll help you examine the git diff for changes to the cody-provider functionality, particularly focusing on the tool use improvements, and then draft a commit message in the conventional commit format.\n\nLet me first check the git diff to see what changes have been made:",
        role = "assistant",
    },
    {
        content = '<selected_files>\n<file path="lua/avante-cody/cody-provider.lua" language="lua">\nlocal log = require("avante-cody.util.log")\n\nlocal LOG_SCOPE = "cody-provider"\n\n-- Documentation for setting up Sourcegraph Cody\n--- Generating an access token: https://sourcegraph.com/docs/cli/how-tos/creating_an_access_token\n\n---@class avante_cody.AvanteProviderFunctor\nlocal CodyProvider = {}\n\n---@class avante_cody.AvanteProviderOpts All fields are optional as they\'ll be merged with defaults\n---@field disable_tools? boolean\n---@field endpoint? string\n---@field api_key_name? string\n---@field max_tokens? integer\n---@field max_output_tokens? integer\n---@field stream? boolean\n---@field topK? integer\n---@field topP? integer\n---@field model? string\n---@field proxy? string\n---@field allow_insecure? boolean\n---@field timeout? integer\n---@field temperature? number\n---@field cody_context? table\n---@field role_map? table\n\n---@class avante_cody.AvanteProviderFunctor\n---@field disable_tools integer\n---@field endpoint string\n---@field api_key_name string\n---@field max_tokens integer\n---@field max_output_tokens integer\n---@field stream boolean\n---@field topK integer\n---@field topP integer\n---@field model string\n---@field proxy string | nil\n---@field allow_insecure boolean\n---@field timeout integer\n---@field temperature integer\n---@field cody_context table\n---@field role_map table\n\nlocal default_opts = {\n    use_xml_format = true,\n    disable_tools = false,\n    endpoint = "https://sourcegraph.com",\n    api_key_name = "SRC_ACCESS_TOKEN",\n    max_tokens = 30000,\n    max_output_tokens = 4000,\n    stream = true,\n    topK = -1,\n    topP = -1,\n    model = "anthropic::2024-10-22::claude-3-7-sonnet-latest",\n    proxy = nil,\n    allow_insecure = false, -- Allow insecure server connections\n    timeout = 30000, -- Timeout in milliseconds\n    temperature = 0,\n    cody_context = {},\n    role_map = {\n        user = "human",\n        assistant = "assistant",\n        system = "system",\n    },\n}\n\n---@param opts? avante_cody.AvanteProviderOpts Options to override defaults\n---@return avante_cody.AvanteProviderFunctor\nfunction CodyProvider:new(opts)\n    -- Create a new instance with default options\n    local instance_opts = vim.deepcopy(default_opts)\n\n    -- Override with any user-provided options\n    if opts then\n        instance_opts = vim.tbl_deep_extend("force", instance_opts, opts)\n    end\n\n    -- Create the provider instance with metatable for inheritance\n    local cody_provider = setmetatable(instance_opts, { __index = self })\n\n    -- Initialize the context for this instance\n    cody_provider.cody_context = {}\n\n    return cody_provider\nend\n\nfunction CodyProvider:transform_tool(tool)\n    local input_schema_properties = {}\n    local required = {}\n    for _, field in ipairs(tool.param.fields) do\n        input_schema_properties[field.name] = {\n            type = field.type,\n            description = field.description,\n        }\n        if not field.optional then\n            table.insert(required, field.name)\n        end\n    end\n    local res = {\n        type = "function",\n        ["function"] = {\n            name = tool.name,\n            description = tool.description,\n        },\n    }\n    if vim.tbl_count(input_schema_properties) > 0 then\n        res["function"].parameters = {\n            type = "object",\n            properties = input_schema_properties,\n            required = required,\n            additionalProperties = false,\n        }\n    end\n    return res\nend\n\nfunction CodyProvider:parse_context_messages(context)\n    local codebase_context = {}\n\n    for _, blob in ipairs(context) do\n        local path = blob.blob.path\n        local file_content = blob.chunkContent\n\n        table.insert(codebase_context, {\n            speaker = self.role_map.user,\n            text = "FILEPATH: " .. path .. "\\nCode:\\n" .. file_content,\n            -- text = "FILEPATH: " .. vim.inspect(blob),\n        })\n        table.insert(codebase_context, {\n            speaker = self.role_map.assistant,\n            text = "Ok.",\n        })\n    end\n\n    return codebase_context\nend\n\nfunction CodyProvider:parse_messages(opts)\n    local messages = {\n        { speaker = self.role_map.system, text = opts.system_prompt },\n    }\n\n    vim.iter(self:parse_context_messages(self.cody_context)):each(function(msg)\n        table.insert(messages, msg)\n    end)\n\n    vim.iter(opts.messages):each(function(msg)\n        table.insert(messages, { speaker = self.role_map[msg.role], text = msg.content })\n    end)\n\n    if opts.tool_histories then\n        for _, tool_history in ipairs(opts.tool_histories) do\n            -- push an assistant message\n            local assistant_message = {\n                speaker = "assistant",\n                content = {\n                    { type = "text", text = "call this tool for me" },\n                    {\n                        type = "tool_call",\n                        tool_call = {\n                            id = tool_history.tool_use.id,\n                            name = tool_history.tool_use.name,\n                            arguments = tool_history.tool_use.input_json,\n                        },\n                    },\n                },\n            }\n\n            local human_message = {\n                speaker = "user",\n                content = {\n                    {\n                        type = "tool_result",\n                        tool_result = {\n                            id = tool_history.tool_result.tool_use_id,\n                            content = tool_history.tool_result.content,\n                        },\n                    },\n                },\n            }\n\n            table.insert(messages, assistant_message)\n            table.insert(messages, human_message)\n        end\n    end\n\n    return messages\nend\n\nfunction CodyProvider:parse_response_without_stream(data, state, opts)\n    local json = vim.json.decode(data)\n    local completion = json.completion\n    local tool_calls = json.tool_calls\n    local stopReason = json.stopReason\n    local usage = json.usage\n\n    opts.on_chunk(completion or "")\n\n    if stopReason == "tool_use" then\n        vim.schedule(function()\n            local tools = {}\n\n            for _, tool in ipairs(tool_calls) do\n                table.insert(tools, {\n                    id = tool.id,\n                    name = tool["function"].name,\n                    input_json = tool["function"].arguments,\n                })\n            end\n\n            opts.on_stop({\n                reason = "tool_use",\n                usage = usage,\n                tool_use_list = tools,\n            })\n        end)\n\n        return\n    end\n\n    opts.on_stop({})\nend\n\nfunction CodyProvider.parse_response(_, ctx, data_stream, event_state, opts)\n    log.debug(\n        LOG_SCOPE,\n        "parse_response: args: %s",\n        vim.inspect({\n            data_stream = data_stream,\n            event_state = event_state,\n            opts = opts,\n            ctx = ctx,\n        }, { newline = "" })\n    )\n\n    if event_state == "done" then\n        opts.on_stop({})\n        return\n    end\n\n    if event_state == "error" then\n        log.error(\n            LOG_SCOPE,\n            "parse_response: error: %s",\n            vim.inspect({\n                data_stream = data_stream,\n            }, { newline = "" })\n        )\n        opts.on_stop({ error = string.format("error: %s", data_stream) })\n        return\n    end\n\n    if data_stream == nil or data_stream == "" then\n        log.debug(LOG_SCOPE, "parse_response: data_stream is empty")\n        return\n    end\n\n    local json = vim.json.decode(data_stream)\n    local delta = json.deltaText\n    local tool_use = json.delta_tool_calls\n    local stopReason = json.stopReason\n    local usage = json.usage\n\n    if delta ~= nil and delta ~= "" then\n        opts.on_chunk(delta)\n    end\n\n    if tool_use and tool_use[1] then\n        log.debug(\n            LOG_SCOPE,\n            "parse_response: tool_use: %s",\n            vim.inspect(tool_use, { newline = "" })\n        )\n        ctx.tool_use = ctx.tool_use\n            or {\n                {\n                    id = "",\n                    name = "",\n                    input_json = "",\n                },\n            }\n\n        local tool_use_ctx = ctx.tool_use\n        local current_tool = tool_use_ctx[1]\n        local tool = tool_use[1]\n\n        current_tool.id = current_tool.id .. tool.id\n        current_tool.name = current_tool.name .. tool["function"].name\n        current_tool.input_json = current_tool.input_json .. tool["function"].arguments\n\n        ctx.tool_use[1] = current_tool\n    end\n\n    if stopReason == "tool_use" then\n        opts.on_stop({\n            reason = "tool_use",\n            usage = usage,\n            tool_use_list = ctx.tool_use,\n        })\n        return\n    end\n\n    if stopReason == "end_turn" then\n        -- opts.on_chunk(\'\\n\\n## context files:\\n  - \' .. table.concat(M.get_context_file_list(M.cody_context), \'\\n  - \'))\n        opts.on_stop({ reason = "complete", useage = usage })\n        return\n    end\nend\n\nCodyProvider.BASE_PROVIDER_KEYS = {\n    "endpoint",\n    "model",\n    "deployment",\n    "api_version",\n    "proxy",\n    "allow_insecure",\n    "api_key_name",\n    "timeout",\n    -- internal\n    "local",\n    "_shellenv",\n    "tokenizer_id",\n    "use_xml_format",\n    "role_map",\n}\n\nfunction CodyProvider:parse_config(opts)\n    local s1 = {}\n    local s2 = {}\n\n    for key, value in pairs(opts) do\n        if vim.tbl_contains(self.BASE_PROVIDER_KEYS, key) then\n            s1[key] = value\n        else\n            s2[key] = value\n        end\n    end\n\n    return s1,\n        vim.iter(s2)\n            :filter(function(_, v)\n                return type(v) ~= "function"\n            end)\n            :fold({}, function(acc, k, v)\n                acc[k] = v\n                return acc\n            end)\nend\n\n---@class avante_cody.CodyProviderCodyTool\n---@field name string\n---@field description string\n---@field parameters { type: string, properties: { [string]: { type: string, description: string }, additionalProperties: boolean, required: string[] } }\n---@field type string\n---@field id string\n\n---@class avante_cody.CodyProviderCurlHeaders\n---@field Content-Type string\n---@field Authorization string\n---\n---@class avante_cody.CodyProviderCurlMessages\n---@field speaker string\n---@field text string\n---\n---@class avante_cody.CodyProviderCurlBody\n---@field model string\n---@field messages avante_cody.CodyProviderCurlMessages\n---@field temperature number\n---@field topK integer\n---@field topP number\n---@field stream boolean\n---@field maxTokensToSample integer\n---@field tools { type: string, ["function"]: avante_cody.CodyProviderCodyTool }[]\n---\n---@class avante_cody.CodyProviderCurlArgs\n---@field url string\n---@field timeout integer\n---@field headers avante_cody.CodyProviderCurlHeaders\n---@field body avante_cody.CodyProviderCurlBody\n---@field insecure boolean\n\n--- @return avante_cody.CodyProviderCurlArgs\nfunction CodyProvider.parse_curl_args(provider, code_opts)\n    log.debug(LOG_SCOPE, "parse_curl_args: args: %s", vim.inspect(code_opts, { newline = "" }))\n    local base, body_opts = provider:parse_config(provider)\n\n    local api_key = provider:parse_api_key()\n    if api_key == nil then\n        -- if no api key is available, make a request with a empty api key.\n        api_key = ""\n    end\n\n    local headers = {\n        ["Content-Type"] = "application/json",\n        ["Authorization"] = "token " .. api_key,\n    }\n\n    local tools = nil\n    if not provider.disable_tools and code_opts.tools then\n        tools = {}\n        for _, tool in ipairs(code_opts.tools) do\n            table.insert(tools, provider:transform_tool(tool))\n        end\n    end\n\n    local messages = provider:parse_messages(code_opts)\n\n    return {\n        url = base.endpoint\n            .. "/.api/completions/stream?api-version=7&client-name=vscode&client-version=1.34.3",\n        timeout = base.timeout,\n        insecure = base.allow_insecure,\n        headers = headers,\n        body = vim.tbl_deep_extend("force", {\n            model = base.model,\n            temperature = body_opts.temperature,\n            topK = body_opts.topK,\n            topP = body_opts.topP,\n            maxTokensToSample = provider.max_output_tokens,\n            stream = provider.stream,\n            messages = messages,\n            tools = tools,\n        }, {}),\n    }\nend\n\nfunction CodyProvider:is_disable_stream()\n    return false\nend\n\nfunction CodyProvider:on_error() end\n\nreturn CodyProvider\n</file>\n</selected_files>\n\n\n\n<recently_viewed_files>\n1. /Users/chris/Documents/github/avante-cody.nvim/lua/avante-cody/cody-provider.lua\n2. /Users/chris/Documents/github/avante-cody.nvim/tests/test_cody-provider.lua\n3. /Users/chris/Documents/github/avante-cody.nvim/plugin/avante-cody.lua\n4. /Users/chris/Documents/github/avante-cody.nvim/.github/workflows/main.yml\n5. /Users/chris/Documents/github/avante-cody.nvim/tests/test_API.lua\n6. /Users/chris/Documents/github/avante-cody.nvim/scripts/minimal_init.lua\n7. /Users/chris/Documents/github/avante-cody.nvim/lua/avante-cody/init.lua\n8. /Users/chris/Documents/github/avante-cody.nvim/tests/helpers.lua\n9. /Users/chris/Documents/github/avante-cody.nvim/lua/avante-cody/main.lua\n10. /Users/chris/Documents/github/avante-cody.nvim/lua/avante-cody/util/log.lua\n</recently_viewed_files>',
        role = "user",
    },

    {
        content = "<memory>\n# Conversation Summary\n\nThe user has asked me to look at `lua/avante-cody/cody-provider.lua` to examine the git diff, specifically focusing on improvements made to the tool use functionality. They requested that I draft a commit message following the conventional commit format based on these changes.\n\nI acknowledged this request and indicated I would first review the git diff to understand what changes were made to the cody-provider file. However, no actual git diff content was provided in the conversation so far.\n\nWe're currently working on the `lua/avante-cody/cody-provider.lua` file, which appears to be part of the avante-cody.nvim Neovim plugin project we've been discussing in previous conversations.\n\nTo continue the conversation, I need to see the actual git diff content to analyze the tool use improvements so I can draft an appropriate conventional commit message.\n</memory>",
        role = "user",
    },

    {
        content = "Look at the git diff for the git diff, particularly looking at the cody-provider where I've improved the tool use functionality and draft a commit using the conventional commit format.\n",
        role = "user",
    },
}
